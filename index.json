{
  "api/OmiyaGames.Cryptography.DomainList.html": {
    "href": "api/OmiyaGames.Cryptography.DomainList.html",
    "title": "Class DomainList | Cryptography documentation",
    "keywords": "Class DomainList that contains a list of strings, optionally encrypted by StringCryptographer . StringCryptographer Inheritance Object DomainList Namespace : OmiyaGames.Cryptography Assembly : cs.temp.dll.dll Syntax public class DomainList : ScriptableObject, ICollection<string>, IEnumerable<string>, IEnumerable Remarks The MIT License (MIT) Copyright (c) 2016-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.0.0-preview.1 Date: 5/14/2016 Author: Taro Omiya Initial verison. Version: 0.2.0-preview.1 Date: 4/27/2020 Author: Taro Omiya Converting to package. Version: 0.2.2-preview.1 Date: 5/19/2020 Author: Taro Omiya Fixing license documentation to be more DocFX friendly. Properties Count The number of domains stored. Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Always returns true. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Gets and sets a string in this list. Declaration public string this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description String Methods Add(String) NOT implemented. Declaration public void Add(string item) Parameters Type Name Description String item Clear() NOT implemented. Declaration public void Clear() Contains(String) Checks if a string is in the DomainList . Declaration public bool Contains(string item) Parameters Type Name Description String item String to search for. Returns Type Description Boolean True if item is in the DomainList . ConvertToRegex(String, StringBuilder) Converts a string used to match a domain to a case-insensitive, single-line regular expression. Supports ' ' (matches any string) and '?' (matches any single character) wildcards, e.g. \" .google.com\" and \"?.google.com\" Declaration public static Regex ConvertToRegex(string domainString, StringBuilder buf = null) Parameters Type Name Description String domainString A one-line string to match a domain. StringBuilder buf A StringBuilder to use as cache; its content will be completely replaced. If set to null, this function creates a new StringBuilder . Returns Type Description Regex New that matches a domain. CopyTo(String[], Int32) Copies the string domains into another array. Declaration public void CopyTo(string[] array, int arrayIndex) Parameters Type Name Description String [] array Array to copy to. Int32 arrayIndex Index to start copying from in array. Decrypt(DomainList, StringCryptographer) Decrypts a DomainList into a string array. Declaration public static string[] Decrypt(DomainList domainList, StringCryptographer decrypter = null) Parameters Type Name Description DomainList domainList The DomainList to decrypt. StringCryptographer decrypter The cryptographer to decrypt the DomainList Returns Type Description String [] Decrypted list of domains. Decrypt(DomainList, StringCryptographer, ref List<Regex>) Clears a List<T> , then populates it with decrypted from a DomainList . Declaration public static void Decrypt(DomainList domainList, StringCryptographer decrypter, ref List<Regex> regularExpressions) Parameters Type Name Description DomainList domainList The DomainList to decrypt. StringCryptographer decrypter The cryptographer to decrypt the DomainList Can be set to null, in which case the content of domainList will be converted to directly. List < Regex > regularExpressions List<T> that gets populated with domain-matching . See Also ConvertToRegex(String, StringBuilder) Decrypt(DomainList, StringCryptographer, ref List<String>) Clears a List<T> , then populates it with decrypted strings from a DomainList . Declaration public static void Decrypt(DomainList domainList, StringCryptographer decrypter, ref List<string> decryptedDomains) Parameters Type Name Description DomainList domainList The DomainList to decrypt. StringCryptographer decrypter The cryptographer to decrypt the DomainList . Can be set to null, in which case the content of domainList is copied over directly. List < String > decryptedDomains List<T> that gets populated with decrypted strings. Generate(String, IList<String>, StringCryptographer) Constructs a new DomainList . Declaration public static DomainList Generate(string name, IList<string> allDomains, StringCryptographer encrypter = null) Parameters Type Name Description String name Name of the asset. IList < String > allDomains List of unencrypted strings to store in the asset. StringCryptographer encrypter An optional cryptographer that encrypts allDomains. Returns Type Description DomainList A mew DomainList . Get(AssetBundle, String) Loads an asset from to a DomainList . Declaration public static DomainList Get(AssetBundle bundle, string assetNameNoFileExtension = null) Parameters Type Name Description AssetBundle bundle Reference to an asset bundle. String assetNameNoFileExtension (Optional) A name to a file in an asset bundle. If none is provided, the first file is converted. Returns Type Description DomainList If successful, a loaded DomainList asset. Otherwise, null. GetEnumerator() Provides an enumerator to go through each string entry in the list. Declaration public IEnumerator<string> GetEnumerator() Returns Type Description IEnumerator < String > Remove(String) NOT implemented. Declaration public bool Remove(string item) Parameters Type Name Description String item Returns Type Description Boolean"
  },
  "api/OmiyaGames.Cryptography.Editor.DomainListAssetBundleGenerator.html": {
    "href": "api/OmiyaGames.Cryptography.Editor.DomainListAssetBundleGenerator.html",
    "title": "Class DomainListAssetBundleGenerator | Cryptography documentation",
    "keywords": "Class DomainListAssetBundleGenerator Creates a window that, after pushing the \"Generate Domain List Asset,\" creates an Asset Bundle containing an instance of DomainList . DomainList Inheritance Object DomainListAssetBundleGenerator Namespace : OmiyaGames.Cryptography.Editor Assembly : cs.temp.dll.dll Syntax public class DomainListAssetBundleGenerator : EditorWindow Remarks The MIT License (MIT) Copyright (c) 2016-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.0.0-preview.1 Date: 5/14/2016 Author: Taro Omiya Initial verison. Version: 0.2.0-preview.1 Date: 4/27/2020 Author: Taro Omiya Converting to package. Version: 0.2.2-preview.1 Date: 5/19/2020 Author: Taro Omiya Fixing license documentation to be more DocFX friendly. Methods GenerateDomainList(String, String, IList<String>, StringCryptographer, Boolean, Boolean) Generates a new file containing a single DomainList . Declaration public static DomainList GenerateDomainList(string nameOfFolder, string nameOfFile, IList<string> allDomains, StringCryptographer encrypter, bool relativeToProject = true, bool overwriteFile = false) Parameters Type Name Description String nameOfFolder Folder to generate the new file. String nameOfFile Name of the file to generate. IList < String > allDomains The list of strings to store in the DomainList . StringCryptographer encrypter Encrypts the content of the generated DomainList . Boolean relativeToProject If true, nameOfFolder will be relative to the Unity project root folder. Boolean overwriteFile If true, allows overwriting the file without user prompt. Returns Type Description DomainList A newly generated DomainList the new file contains."
  },
  "api/OmiyaGames.Cryptography.Editor.html": {
    "href": "api/OmiyaGames.Cryptography.Editor.html",
    "title": "Namespace OmiyaGames.Cryptography.Editor | Cryptography documentation",
    "keywords": "Namespace OmiyaGames.Cryptography.Editor Classes DomainListAssetBundleGenerator Creates a window that, after pushing the \"Generate Domain List Asset,\" creates an Asset Bundle containing an instance of DomainList . DomainList StringCryptographyEditor An editor script for StringCryptographer . StringCryptographer"
  },
  "api/OmiyaGames.Cryptography.Editor.StringCryptographyEditor.html": {
    "href": "api/OmiyaGames.Cryptography.Editor.StringCryptographyEditor.html",
    "title": "Class StringCryptographyEditor | Cryptography documentation",
    "keywords": "Class StringCryptographyEditor An editor script for StringCryptographer . StringCryptographer Inheritance Object StringCryptographyEditor Namespace : OmiyaGames.Cryptography.Editor Assembly : cs.temp.dll.dll Syntax public class StringCryptographyEditor : UnityEditor.Editor Remarks The MIT License (MIT) Copyright (c) 2019-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.0.0-preview.1 Date: 2/11/2019 Author: Taro Omiya Initial verison. Version: 0.1.0-preview.1 Date: 4/3/2020 Author: Taro Omiya Converted the class to a package. Version: 0.2.2-preview.1 Date: 5/19/2020 Author: Taro Omiya Fixing license documentation to be more DocFX friendly. Version: 0.3.0-preview.1 Date: 6/16/2020 Author: Taro Omiya Converted editor to utilize UIElements. Redesigned the UI a bit. Fields DefaultFileName Default file name when creating a new StringCryptographer . Declaration public const string DefaultFileName = null Field Value Type Description String Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement"
  },
  "api/OmiyaGames.Cryptography.html": {
    "href": "api/OmiyaGames.Cryptography.html",
    "title": "Namespace OmiyaGames.Cryptography | Cryptography documentation",
    "keywords": "Namespace OmiyaGames.Cryptography Classes DomainList that contains a list of strings, optionally encrypted by StringCryptographer . StringCryptographer StringCryptographer that can encrypt or decrypt strings. Taken directly from this forum post by Kris444."
  },
  "api/OmiyaGames.Cryptography.StringCryptographer.html": {
    "href": "api/OmiyaGames.Cryptography.StringCryptographer.html",
    "title": "Class StringCryptographer | Cryptography documentation",
    "keywords": "Class StringCryptographer that can encrypt or decrypt strings. Taken directly from this forum post by Kris444. Inheritance Object StringCryptographer Namespace : OmiyaGames.Cryptography Assembly : cs.temp.dll.dll Syntax public class StringCryptographer : ScriptableObject Remarks The MIT License (MIT) Copyright (c) 2019-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.0.0-preview.1 Date: 2/11/2019 Author: Taro Omiya Initial verison. Version: 0.1.0-preview.1 Date: 4/3/2020 Author: Taro Omiya Converted the class to a package. Version: 0.2.2-preview.1 Date: 5/19/2020 Author: Taro Omiya Fixing license documentation to be more DocFX friendly. Constructors StringCryptographer() Generates a StringCryptographer with a randomized value for every field, using GetRandomPassword(Int32, String) . Declaration public StringCryptographer() StringCryptographer(Int32) Generates a StringCryptographer with a randomized value for every field, using GetRandomPassword(Int32, String) . Declaration public StringCryptographer(int passwordLength) Parameters Type Name Description Int32 passwordLength The string length of PasswordHash and SaltKey StringCryptographer(String) Generates a StringCryptographer with PasswordHash set. All other fields are randomized using GetRandomPassword(Int32, String) . Declaration public StringCryptographer(string passwordHash) Parameters Type Name Description String passwordHash Sets PasswordHash StringCryptographer(String, Int32) Generates a StringCryptographer with PasswordHash set. All other fields are randomized using GetRandomPassword(Int32, String) . Declaration public StringCryptographer(string passwordHash, int saltKeyLength) Parameters Type Name Description String passwordHash Sets PasswordHash Int32 saltKeyLength Length of SaltKey StringCryptographer(String, String) Generates a StringCryptographer with PasswordHash and SaltKey set. All other fields are randomized using GetRandomPassword(Int32, String) . Declaration public StringCryptographer(string passwordHash, string saltKey) Parameters Type Name Description String passwordHash Sets PasswordHash String saltKey Sets SaltKey StringCryptographer(String, String, String) Generates a StringCryptographer with all fields set. Declaration public StringCryptographer(string passwordHash, string saltKey, string ivKey) Parameters Type Name Description String passwordHash Sets PasswordHash String saltKey Sets SaltKey String ivKey Sets IvKey Fields AlphaNumericChars Declaration public const string AlphaNumericChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\" Field Value Type Description String AlphaNumericSymbolsChars Declaration public const string AlphaNumericSymbolsChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*-_+=?,.`~|(){}[]'\\\"\\\\/<>\" Field Value Type Description String DefaultPasswordLength Declaration public const int DefaultPasswordLength = 32 Field Value Type Description Int32 IvKeyBlockSize Declaration public const int IvKeyBlockSize = 18 Field Value Type Description Int32 Properties IvKey Initialization Vector key, used for encryption. Declaration public string IvKey { set; } Property Value Type Description String PasswordHash A random hash used for used for encryption. Declaration public string PasswordHash { set; } Property Value Type Description String SaltKey A salt to make PasswordHash less predictable. Declaration public string SaltKey { set; } Property Value Type Description String Methods Decrypt(String) Decrypts an encrypted string. Declaration public string Decrypt(string encryptedText) Parameters Type Name Description String encryptedText String to decrypt. Returns Type Description String Decrypted string. Encrypt(String) Encrypts a string. Declaration public string Encrypt(string plainText) Parameters Type Name Description String plainText The string to encrypt. Returns Type Description String plainText, encrypted. GetRandomPassword(Int32, String) Generates a random password using alphanumeric characters. Taken directly from this StackOverflow post by Eric J. Declaration public static string GetRandomPassword(int length, string acceptableChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*-_+=?,.`~|(){}[]'\\\"\\\\/<>\") Parameters Type Name Description Int32 length Length of the returned password String acceptableChars Returns Type Description String An alphnumeric password"
  },
  "index.html": {
    "href": "index.html",
    "title": "Resources | Cryptography documentation",
    "keywords": "Resources This package provides the following cyrptography tools: String Cryptographer An asset that encrypts and decrypts texts. Documentation Source code Domain List Domain List is a binary file that stores a list of strings, such as a list of acceptable web host domains. This package provides a dialog to create, read, and edit these files. Documentation Source code LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code."
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log: | Cryptography documentation",
    "keywords": "Change Log: 1.0.0 Marking this tool as stable, given it's been battle-tested long enough. 0.3.0-preview.3 Enhancment: upgrading the assembly definitions and package files. 0.3.0-preview.2 Refactor: Some C# code has been reduced by utilizing more UXML features. 0.3.0-preview.1 New Enhancement: Updated String Cryptographer inspector to utilize UIElements , thus giving it a new look. Updated documentation on String Cryptographer accordingly. 0.2.1-preview.1 New Enhancement: Migrating documentation from Doxygen to DocFX. Added auto-DocFX-generating Github Action. It's now hosted at omiyagames.github.io/omiya-games-cryptography . Added auto-mirroring Github Action. 0.2.0-preview.1 New Features: Adding AssetBundle , Domain List , a binary file containing a ScriptableObject that contains a list of (optionally encrypted) strings. Documentation Improvements: Fix #1: vastly improved the documentation on String Cryptographer . Fix #2: added documentation for Domain List . Updated Doxygen-generated documentation. 0.1.0-preview.1 Initial release: Adding ScriptableObject , String Cryptographer as the first cryptography tool."
  },
  "manual/domain-list.html": {
    "href": "manual/domain-list.html",
    "title": "Domain List | Cryptography documentation",
    "keywords": "Domain List Domain List is a binary file that stores a list of strings, such as a list of acceptable web host domains. Pre-requisites While technically optional, it's highly recommended to create and edit a Domain List with an associating String Cryptographer. In doing so, all the stored strings will be enrypted, making it difficult to edit the Domain List from external tools: details on how to create one is documented here . For security reasons, Domain List does not store a copy of the String Cryptographer. Opening Domain List window Creating and editing Domain List is rather unusual. Since it's intentionally designed to be difficult to read by any other application, this package provides a dialog box to step through the process of creating one, than using the \"Asset -> Create\" context menu. To open this window, in the file menu bar, select \"Windows -> Omiya Games -> Domain List.\" This should make the following window pop-up. Creating an asset bundle Once the window is open, to start creating a Domain List, simply fill out the following fields: (Optional) Set the Encrypter field to a String Encrypter in the Project window. Expand \"Generate Domain List Asset\" foldout if it isn't already by clicking on it. Under \"All Accepted Domains\" list, add the plain-text strings to store in the asset bundle. Fill out the the two fields to indicate where the file should be created: \"Name of folder\" field should contain a path relative to the root of the project e.g. Assets/FolderName . Note Unity expects '/' as the folder divider, regardless of operating system. \"Name of asset to generate\" will set the name of the new file. Once all the fields are filled in, click \"Generate Domain List Asset\" to create the asset. This can take a few minutes. Note: the process of making this simpler is being investigated. See: Github Issue #5 Reading and editing an asset bundle In the same window, fill out the following fields: (Optional) Set the Encrypter field to a String Encrypter in the Project window. Expand \"REad Domain List Asset\" foldout if it isn't already by clicking on it. Drag-and-drop from the Project window the Domain List you want to edit or read. If you click on \"Read Domain List Asset,\" a message bubble will show up at the bottom of the foldout, providing a list of strings the Domain List holds (if it was able to be read successfully). If you click on \"Edit Domain List Asset,\" the fields in the \"Generate Domain List Asset\" foldout will now be populated with the information contained in the domain list. Simply expand that foldout, make the edits needed, then click \"Generate Domain List Asset.\" Note #1: if you try to overwrite an existing file, the dialog will warn you so, and ask if you want to confirm this action. Obviously, click \"Yes\" will prompt the dialog to overwrite the file. Note #2: the process of making this simpler is being investigated. See: Github Issue #5 Using the asset in a script Loading a Domain List in a scripts does require a little work. The example below indicates how to load an AssetBundle asynchronously using a user-defined file name, followed by retrieving a DomainList from that AssetBundle via a helper function: using UnityEngine; using System.Collections; using System.IO; // This using is necessary to support Domain List using OmiyaGames.Cryptography; public class SampleDomainList : MonoBehaviour { // Inspector variables necessary to load a Domain List [SerializeField] private string assetName; [SerializeField] private StringCryptographer decrypter; // Start is called before the first frame update IEnumerator Start() { // Asyncrhonously load the asset bundle AssetBundleCreateRequest bundleLoadRequest = AssetBundle.LoadFromFileAsync(Path.Combine(Application.streamingAssetsPath, assetName)); yield return bundleLoadRequest; // Confirm an asset bundle was successfully loaded AssetBundle myAssetBundle = bundleLoadRequest.assetBundle; if (myAssetBundle == null) { Debug.Log(\"Failed to load AssetBundle!\"); // Halt Start yield break; } // Attempt to load the Domain List from the asset bundle DomainList list = DomainList.Get(myAssetBundle); if (list == null) { Debug.Log(\"Failed to load DomainList!\"); // Unload the entire asset bundle myAssetBundle.Unload(false); // Halt Start yield break; } // If successfully loaded, decrypt all the strings stored in the asset foreach(string encryptedString in list) { Debug.Log(decrypter.Decrypt(encryptedString)); } // Note: this loop below does the same thing as the one above; // DomainList is just a read-only IList<string>, after all. for (int index = 0; index < list.Count; ++index) { Debug.Log(decrypter.Decrypt(list[index])); } // Unload the entire asset bundle myAssetBundle.Unload(false); } } Additional Resources DomainList.cs API documentation DomainList.cs source code DomainListAssetBundleGenerator.cs source code (the dialog box)"
  },
  "manual/string-cryptographer.html": {
    "href": "manual/string-cryptographer.html",
    "title": "String Cryptographer | Cryptography documentation",
    "keywords": "String Cryptographer String Cryptographer is an asset that encrypts and decrypts texts. Creating the asset To create one, simply click on the \"Asset\" file menu and select \"Create -> Omiya Games -> String Cryptographer.\" Alternatiely, one can bring up the same context menu via clicking the plus button on the upper-left hand corner of the Project window, or right-click within the Project window. In doing so, the Project window will prompt the user to enter a file name. Rename the file to your liking, and hit enter to confirm. At this point, the asset is ready to use! All the fields are randomly generated, so each new String Cryptographer created should be unique. Editing the asset The passwords held in the file can be customized by clicking on the asset in the Project window, and making the edits in the Inspector window. Alternatively, click on \"Randomize all fields\" button to replace all fields with a new random string. Don't forget to save the project after making edits to the file, so the changes actually gets written in the file. Testing the asset The inspector provides the user a chance to test how well the String Cryptographer encrypts and decrypts in the two groups of fields at the bottom foldouts. Simply click on the Test Encryption/Decryption to expand them. For testing encryption, simply enter your text in the input field, then click Encrypt . The output field below will contain the encrypted result. Similarly, for decryption, enter the encrypted text in the input field, then click Decrypt . Note the input text field accepts text with multiple lines as well: just hit enter to add a newline. Finally, text in the output fields is read-only: one can highlight and copy the text (e.g. by tapping ctrl+V on Windows and Linux OS), or simply click the Copy to Clipboard button to do the same thing. Using the asset in a script Utilizing String Cryptographer in scripts is incredibly easy. Once simply needs to add a member variable exposed to the inspector to start utilizing the asset: using UnityEngine; // Don't forget to add this \"using\" to support StringCryptographer using OmiyaGames.Cryptography; public class SampleStringCryptographer : MonoBehaviour { // [SerializeField] Exposes private variables to the inspector [SerializeField] private StringCryptographer encrypter; Remember to, after attaching this script to a GameObject, drag-and-drop a String Cryptographer asset to the inspector field. From there, to encrypt a string, simply use the Encrypt(string) method: // Encrypt the text string encryptedText = encrypter.Encrypt(text); // Print on the console Debug.Log(text + \" encrypted is: \" + encryptedText); And of course, to decrypt an encrypted string, simply use the Decrypt(string) method: // Decrypt the text string decryptedText = encrypter.Decrypt(encryptedText); // Print on the console Debug.Log(encryptedText + \" decrypted is: \" + decryptedText); Full example below: using UnityEngine; // Don't forget to add this \"using\" to support StringCryptographer using OmiyaGames.Cryptography; public class SampleStringCryptographer : MonoBehaviour { // [SerializeField] Exposes private variables to the inspector [SerializeField] private StringCryptographer encrypter; [SerializeField] private string text; // Start is called before the first frame update void Start() { // Encrypt the text string encryptedText = encrypter.Encrypt(text); // Print on the console Debug.Log(text + \" encrypted is: \" + encryptedText); // Decrypt the text string decryptedText = encrypter.Decrypt(encryptedText); // Print on the console Debug.Log(encryptedText + \" decrypted is: \" + decryptedText); } } As String Cryptographer is a ScriptableObject , it can be constructed within a script as well: readonly StringCryptographer encrypter = new StringCryptographer(\"Password123 - Also my briefcase code...\", \"Salt key\", \"IV Key\"); // Encrypt the text string encryptedText = encrypter.Encrypt(\"Text to encrypt and decrypt\"); // Print on the console Debug.Log(text + \" encrypted is: \" + encryptedText); // Decrypt the text string decryptedText = encrypter.Decrypt(encryptedText); // Print on the console Debug.Log(encryptedText + \" decrypted is: \" + decryptedText); Additional Resources StringCryptographer.cs API documentation StringCryptographer.cs source code StringCryptographyEditor.cs source code (generates the inspector editor)"
  }
}